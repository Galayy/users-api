/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.itechart.container.spring.users.generated.api;

import com.itechart.container.spring.users.generated.model.SignInRequest;
import com.itechart.container.spring.users.generated.model.SignUpRequest;
import com.itechart.container.spring.users.generated.model.TokenRequest;
import com.itechart.container.spring.users.generated.model.TokenResponse;
import com.itechart.container.spring.users.generated.model.User;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-03-24T13:41:48.118567+03:00[Europe/Minsk]")

@Validated
@Api(value = "auth", description = "the auth API")
public interface AuthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "refresh", notes = "", response = TokenResponse.class, tags={ "auth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Token is refreshed", response = TokenResponse.class),
        @ApiResponse(code = 401, message = "Expired or invalid JWT token") })
    @RequestMapping(value = "/auth/refresh",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<TokenResponse> refresh(@ApiParam(value = "" ,required=true )  @Valid @RequestBody TokenRequest tokenRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"refreshTokenExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"accessTokenExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"accessToken\" : \"accessToken\",  \"refreshToken\" : \"refreshToken\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "signIn", notes = "", response = TokenResponse.class, tags={ "auth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Login success", response = TokenResponse.class),
        @ApiResponse(code = 400, message = "Invalid email"),
        @ApiResponse(code = 401, message = "Wrong login and/or password") })
    @RequestMapping(value = "/auth/signin",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<TokenResponse> signIn(@ApiParam(value = "signInRequest" ,required=true )  @Valid @RequestBody SignInRequest signInRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"refreshTokenExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"accessTokenExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"accessToken\" : \"accessToken\",  \"refreshToken\" : \"refreshToken\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "signUp", notes = "", response = User.class, tags={ "auth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "CREATED", response = User.class),
        @ApiResponse(code = 400, message = "Invalid email or phone"),
        @ApiResponse(code = 422, message = "User already exists or\\and didn't logout") })
    @RequestMapping(value = "/auth/signup",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<User> signUp(@ApiParam(value = "signUpRequest" ,required=true )  @Valid @RequestBody SignUpRequest signUpRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"firstName\" : \"firstName\",  \"lastName\" : \"lastName\",  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",  \"password\" : \"password\",  \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",  \"phone\" : \"+753 92 321 54 76\",  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",  \"email\" : \"email\",  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
